//
//  SourceString.swift
//  Transifex
//
//  Created by Dimitrios Bendilas on 2/8/20.
//  Copyright Â© 2020 Transifex. All rights reserved.
//

import Foundation

/// Publicly exposed class that holds all the information for the translation units that will be pushed to CDS.
///
/// This class mirrors the internal SourceString struct and offers a flat structure of the required and optional
/// properties of the struct while also being able to be used both by Swift and Objective-C applications.
public final class TXSourceString: NSObject {
    /// The key that was generated by the `txGenerateKey()` method
    let key: String
    /// The source string
    let sourceString: String
    /// An optional developer comment
    let developerComment: String?
    /// A list of relative file paths where this string is located.
    let occurrences: [String]
    /// A list of tags accompanying this source string
    let tags: [String]?
    /// A limit provided by the developer that should be respected by translators when translating the
    /// source string, 0 means no limit.
    let characterLimit: Int
    /// A list of strings providing more context to the source string
    let context: [String]?
    
    /// Public and designated constructor.
    ///
    /// - Parameters:
    ///   - key: The key that was generated by the `txGenerateKey()` method
    ///   - sourceString: The source string
    ///   - occurrences: A list of relative file paths where this string is located.
    ///   - characterLimit: A limit provided by the developer that should be respected by translators
    ///   when translating the source string, 0 means no limit.
    ///   - developerComment: An optional developer comment
    ///   - tags: A list of tags accompanying this source string
    ///   - context: A list of strings providing more context to the source string
    @objc
    public init(key: String,
                sourceString: String,
                occurrences: [String],
                characterLimit: Int,
                developerComment: String? = nil,
                tags: [String]? = nil,
                context: [String]? = nil) {
        self.key = key
        self.sourceString = sourceString
        self.developerComment = developerComment
        self.occurrences = occurrences
        self.tags = tags
        self.characterLimit = characterLimit
        self.context = context
    }
    
    /// Description of the source string used for debugging purposes
    public override var debugDescription: String {
"""
TXSourceString(key: \(key), \
sourceString: \(sourceString), \
developerComment: \(developerComment ?? "Not set"), \
occurrences: \(occurrences)
tags: \(tags?.debugDescription ?? "Not set"), \
characterLimit: \(characterLimit), \
context: \(context?.debugDescription ?? "Not set"))
"""
    }
    
    /// Converts the `TXSourceString` to the internal `SourceString` representation, when
    /// CDS handler needs to push the translations to the CDS server.
    ///
    /// - Returns: The `SourceString` representation of the current `TXSourceString`
    internal func sourceStringRepresentation() -> SourceString {
        let meta = SourceStringMeta(
            context: context,
            comment: developerComment,
            characterLimit: characterLimit,
            tags: tags,
            occurrences: occurrences)
        
        return SourceString(string: sourceString,
                            key: key,
                            meta: meta)
    }
}

/// Represents the metadata that accompany a SourceString
struct SourceStringMeta : Codable {
    var context : [String]?
    var comment : String?
    var characterLimit : Int?
    var tags : [String]?
    var occurrences : [String]?
    
    enum CodingKeys : String, CodingKey {
        case context
        case comment = "developer_comment"
        case characterLimit = "character_limit"
        case tags
        case occurrences
    }
}

extension SourceStringMeta : CustomDebugStringConvertible {
    var debugDescription: String {
        """
SourceStringMeta(tags: \(tags?.debugDescription ?? "Not set"), \
context: \(context?.debugDescription ?? "Not set"), \
comment: \(comment ?? "Not set"), \
characterLimit: \(characterLimit?.description ?? "Not set")), \
occurrences: \(occurrences?.debugDescription ?? "Not set")
"""
    }
}

/// Represents a string in the source locale, along with all its properties.
struct SourceString : Codable {
    /// The string itself.
    var string : String
    
    /// A unique identifier for the string.
    var key : String = ""
    
    /// A dictionary with metadata that accompany the string.
    var meta : SourceStringMeta?

    /// An optional list of strings that give extra information about the string.
    var context : [String]? {
        get { return meta?.context }
    }
    
    /// An optional comment that gives extra context to the translators, in order to write a better translation
    /// for this string.
    var comment : String? {
        get { return meta?.comment }
    }
    
    /// An optional integer that tells translators how long the translation can be for this string.
    var characterLimit: Int? {
        get { return meta?.characterLimit }
    }
    
    /// An optional list of strings that give extra information on this string, often used for aiding the
    /// automation of the localization workflow.
    var tags: [String]? {
        get { return meta?.tags }
    }
    
    /// A list of strings that provide information about the places where this string can be found.
    /// e.g. a list of `.swift` filenames of a project
    var occurrences: [String]? {
        get { return meta?.occurrences }
    }
    
    /// Adds a new occurence for the string.
    ///
    /// - Parameter occurrence: a place where this string is found, e.g. a file name
    mutating func addOccurrence(_ occurrence : String) {
        meta?.occurrences?.append(occurrence)
    }
    
    enum CodingKeys : String, CodingKey {
        case string, meta
    }
}

extension SourceString : CustomDebugStringConvertible {
    var debugDescription: String {
        """
SourceString(string: \(string), \
key: \(key), \
meta: \(meta?.debugDescription ?? "Not set"))
"""
    }
}
